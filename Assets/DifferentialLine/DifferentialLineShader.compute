#pragma kernel updateKernel
#pragma kernel resetKernel
#pragma kernel renderKernel
#pragma kernel resetTextureKernel
#pragma kernel appendKernel
#pragma enable_d3d11_debug_symbols

//---- INCLUDES

#include "Assets/Common/ShaderUtilities/random.hlsl"

//---- CONSTANTS

#define NUMTHREADS_POINTS 32
#define NUMTHREADS_RESOLUTION 32

#define EPSILON .000001
#define DIMENSIONS 100.0
#define PI 3.14

#define START_LINE 0
#define START_CIRCLE 1

//----- NODES

struct Node
{
	float2 position;
	int previous;
	int next;
};
RWStructuredBuffer<Node> writeBuffer;
RWStructuredBuffer<Node> writeBuffer2; //used for appendKernel - we must write to both at the same time
StructuredBuffer<Node> readBuffer;

//------ VARIABLES

const int resolution;
const float aspectRatio;
const int maxCount;

int startShape;

const float4 lineStartAndEnd;
const float initialRadius;
const int initialCount;

const float maxConnectionLength;

const float repulsionRadius;
const float minNeighborDist;

const float movementSpeed;
const float deltaTime;
const int step;

const int nodeCount;

RWTexture2D<float4> outTexture;

RWStructuredBuffer<RandState> randStates;

const float fadeCoefficient;
const int pointSize;

const float4 pointColor;

const bool pinEnds;

bool invalidIndex(int index)
{
	return index < 0;
}

float2 constrainByDistance(float2 toConstrain, float2 constraint, float distance) 
{
	const float2 delta = toConstrain - constraint;
	const float dist = length(delta);
	if (dist > distance) 
	{
		const float2 direction = delta / dist;
		return constraint + direction * distance;
	}
	else 
	{
		return toConstrain;
	}
}

[numthreads(NUMTHREADS_POINTS, 1, 1)]
void updateKernel(uint3 id : SV_DispatchThreadID)
{
	Node currentNode = readBuffer[id.x];

	float2 repulsionMovement = float2(.0, .0);
	for (int i = 0; i < nodeCount; i++)
	{
		if (i == (int)id.x
			|| i == currentNode.previous
			|| i == currentNode.next)
		{
			continue;
		}

		Node otherNode = readBuffer[i];
		const float2 delta = currentNode.position - otherNode.position;
		const float deltaLength = length(delta);
		if (deltaLength > EPSILON && deltaLength <= repulsionRadius)
		{
			repulsionMovement += delta / deltaLength;
		}
	}
	
	const float movementLength = length(repulsionMovement);
	if (movementLength > EPSILON)
	{
		currentNode.position += repulsionMovement / movementLength * movementSpeed * deltaTime;

		//neighbor nodes, want to get closer (within a threshold)
		if(!invalidIndex(currentNode.previous))
		{
			const Node previousNode = readBuffer[currentNode.previous];
			currentNode.position = constrainByDistance(currentNode.position, previousNode.position, minNeighborDist);
		}
		else if (pinEnds) 
		{
			return;
		}

		if(!invalidIndex(currentNode.next))
		{
			const Node nextNode = readBuffer[currentNode.next]; 
			currentNode.position = constrainByDistance(currentNode.position, nextNode.position, minNeighborDist);
		}
		else if (pinEnds)
		{
			return;
		}

		writeBuffer[id.x] = currentNode;
	}
}

float2 circleFromID(uint id)
{
	const float angle = (float)id.x / (float)initialCount * 2.0 * PI;
	return DIMENSIONS * (float2(.5 * aspectRatio, .5) + initialRadius * float2(cos(angle), sin(angle)));
}

float2 lineFromID(uint id)
{
	const float t = (float)(id) / (float)initialCount;
	const float2 midpoint = lerp(lineStartAndEnd.xy, lineStartAndEnd.zw, t);
	return DIMENSIONS * float2(midpoint.x * aspectRatio, midpoint.y);
}

float2 startPosition(uint id)
{
	switch(startShape)
	{
	case START_LINE:
		return lineFromID(id);
	case START_CIRCLE:
		return circleFromID(id);
	}
	return (float2).0;
}

[numthreads(NUMTHREADS_POINTS, 1, 1)]
void resetKernel(uint3 id : SV_DispatchThreadID)
{
	const float2 position = startPosition(id.x);

	const bool wrap = startShape != START_LINE;

	int previous = ((int)id.x) - 1;
	int next = id.x + 1;

	if (previous < 0) previous = wrap ? initialCount - 1 : -1;
	if (next >= initialCount) next = wrap ? 0 : -1;

	Node node;
	node.position = position;
	node.previous = previous;
	node.next = next;
	writeBuffer[id.x] = node;
}

// ----- Texture Kernels

int2 getCoords(float2 position) 
{
	return position * (float2)resolution / DIMENSIONS;
}

float2 getPixelPosition(int2 coords) 
{
	return coords / ((float2)resolution / DIMENSIONS);
}

bool withinScreen(int2 coords)
{
	return coords.x > 0 && coords.y > 0 && coords.x < resolution*aspectRatio && coords.y < resolution;
}

void drawDot(float2 centerPosition)
{
	const int2 center = getCoords(centerPosition);
	int2 start = center - pointSize;
	int2 end = center + pointSize;

	for(int y = start.y; y <= end.y; y++)
	for(int x = start.x; x <= end.x; x++)
	{
		const int2 currentCoord = int2(x, y);
		const int dist = distance(currentCoord, center);
		if (dist <= pointSize)
		{
			const float aa = .5 + .5 * smoothstep(.0, 1.0, 1.0 - (float)dist / (float)pointSize);
			const float4 color = aa * pointColor;
			outTexture[currentCoord] += color;
		}
	}
}

[numthreads(NUMTHREADS_POINTS, 1, 1)]
void renderKernel(uint3 id : SV_DispatchThreadID)
{
	if ((int)id.x >= nodeCount)
	{
		return;
	}

	const Node node = readBuffer[id.x];

	drawDot(node.position);
}


[numthreads(NUMTHREADS_RESOLUTION, NUMTHREADS_RESOLUTION, 1)]
void resetTextureKernel(uint3 id : SV_DispatchThreadID) 
{
	outTexture[id.xy] = outTexture[id.xy] * fadeCoefficient;
}

// ----- Append Kernel

int getRandomIndex(uint id, int range) 
{
	uint randSeed = wangHash(id + step);
	const float random01 = rand(randSeed);
	return random01 * (range - .5);
}

const int nodesToAppend;

[numthreads(1, 1, 1)]
void appendKernel(uint3 id : SV_DispatchThreadID)
{
	for (int i = 0; i < nodesToAppend; i++) 
	{
		const int newIndex = nodeCount+i;

		const int chosenIndex = getRandomIndex(id.x, newIndex);

		Node chosenNode = writeBuffer[chosenIndex];
		const int nextIndex = chosenNode.next;

		if (invalidIndex(nextIndex)) continue;

		Node nextNode = writeBuffer[nextIndex];

		nextNode.previous = newIndex;
		chosenNode.next = newIndex;

		Node appendedNode;
		appendedNode.position = lerp(chosenNode.position, nextNode.position, .5);
		appendedNode.previous = chosenIndex;
		appendedNode.next = nextIndex;

		writeBuffer[newIndex] = appendedNode;
		writeBuffer[nextIndex] = nextNode;
		writeBuffer[chosenIndex] = chosenNode;

		writeBuffer2[newIndex] = appendedNode;
		writeBuffer2[nextIndex] = nextNode;
		writeBuffer2[chosenIndex] = chosenNode;
	}
}